#!/bin/bash

# flush terminal log to the file
function detail.aish_flush_script_log
{
  kill -USR1 $AISH_PID
}
# truncate the terminal log
function detail.aish_truncate_script_log
{
  truncate -s 0 $AISH_LOGFILE
}
# write the terminal log to the part file
function aish_rollout
{
  detail.aish_flush_script_log
  #sed -r 's/\x1b\[[0-9;]*[a-zA-Z]//g' $AISH_LOGFILE | col -b > $AISH_SESSION/part_$(date +%Y%m%d_%H%M%S)_user.txt
  cat $AISH_LOGFILE | python3 $AISH_HOME/clean_terminal_log.py > $AISH_SESSION/part_$(date +%Y%m%d_%H%M%S)_user.txt
  detail.aish_truncate_script_log
}
# clear the part files
function aish_clear
{
  rm -f $AISH_SESSION/part_*
  detail.aish_flush_script_log
  detail.aish_truncate_script_log
  clear
}
# list the part files
function aish_ls
{
  cd $AISH_SESSION
  ls * | grep 'part_*' | nl
  cd - > /dev/null
}
# remove the last part file
function aish_rm_last
{
  cd $AISH_SESSION
  files="$(ls | grep 'part_*')"
  if [[ -z "$files" ]]; then
    return
  fi
  last="$(echo "$files" | tail -n 1)"
  rm -v $last
  cd - > /dev/null
}
# calculate the message size
function detail.aish_calc_message_size
{
  detail.aish_flush_script_log
  sed -r 's/\x1b\[[0-9;]*[a-zA-Z]//g' $AISH_LOGFILE | col -b > $AISH_SESSION/tmp_user.txt
  env LANG=C du --apparent-size -ch $(detail.aish_list_parts) $AISH_SESSION/tmp_user.txt | grep 'total$' | sed -e 's/[ \t]\+total$//'
}
# list the part files for the message that is sent
function detail.aish_list_parts
{
  if [[ -z "$1" ]]; then
    max_send=$AISH_MAX_SEND_MESSAGE
  else
    max_send=$1
  fi
  if [[ -z "$max_send" ]]; then
    echo $AISH_SESSION/part_*
    return
  fi
  files=$(find $AISH_SESSION -name 'part_*')
  if [[ -z "$files" ]]; then
    return
  fi
  ls $files | tail -n $max_send
}
# write the code block to individual files
function detail.aish_pickup_codeblock
{
  start_marker='```'
  end_marker='```'

  while IFS= read -r line; do
    if [[ "$line" =~ ^\ *"$start_marker"* ]]; then
      file_name="$AISH_SESSION/codeblock_$(date +%Y%m%d_%H%M%S)_$(printf '%02d' $file_num).txt"
      file_num=$((file_num + 1))
      while IFS= read -r code_line; do
        if [[ "$code_line" =~ ^\ *"$end_marker" ]]; then
          break
        fi
        echo "$code_line" >> "$file_name"
      done
    fi
  done
}
