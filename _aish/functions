#!/bin/bash

# flush terminal log to the file
function detail.aish_flush_script_log
{
  kill -USR1 $AISH_PID
}
# truncate the terminal log
function detail.aish_truncate_script_log
{
  truncate -s 0 $AISH_LOGFILE
}
# write the terminal log to the part file
function aish_rollout
{
  detail.aish_flush_script_log
  if [[ ! -f "$AISH_SESSION"/mute ]]; then
    cat $AISH_LOGFILE | python3 $AISH_HOME/clean_terminal_log.py > $AISH_SESSION/part_$(date +%Y%m%d_%H%M%S)_user.txt
  fi
  detail.aish_truncate_script_log
}
# clear the part files
function aish_clear
{
  rm -f $AISH_SESSION/part_*
  rm -f $AISH_SESSION/codeblock_*
  rm -f $AISH_SESSION/approved_lines
  detail.aish_flush_script_log
  detail.aish_truncate_script_log
  clear
}
function aish_mute
{
  aish_rollout
  touch $AISH_SESSION/mute
}
function aish_unmute
{
  detail.aish_flush_script_log
  detail.aish_truncate_script_log
  rm -f $AISH_SESSION/mute
}
# list the part files
function aish_ls
{
  cd $AISH_SESSION
  ls part_* | sort -r | nl
  cd - > /dev/null
}
function aish_last
{
  # show the last part file
  # usage: aish_last [-f] [-n <number>]
  # -f: full path
  # -n: skip <number> of files from the end
  # example: aish_last -f -n 2

  local full_path=false
  local skip=1

  while getopts "fn:" opt; do
    case $opt in
      f)
        full_path=true
        ;;
      n)
        if ! [[ "$OPTARG" =~ ^[0-9]+$ ]] || [[ "$OPTARG" -lt 1 ]]; then
          echo "Invalid argument for -n: $OPTARG" >&2
          return 1
        fi
        skip="$OPTARG"
        ;;
      *) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
    esac
  done
  shift $((OPTIND - 1))
 
  if [[ "$full_path" == true ]]; then
    files="$(ls -1 "$AISH_SESSION"/part_*)"
  else
    files="$(ls -1 "$AISH_SESSION" | grep 'part_*')"
  fi

  if [[ -z "$files" ]]; then
    return 0
  fi
  echo "$files" | tail -n "$skip" | head -n 1
}
# remove the last part file
function aish_rm_last
{
  cd $AISH_SESSION
  files="$(ls | grep 'part_*')"
  if [[ -z "$files" ]]; then
    return
  fi
  last="$(echo "$files" | tail -n 1)"
  rm -v $last
  cd - > /dev/null
}
function detail.aish_find_dot_aish
{
  current_dir=$(pwd)
  while [ "$current_dir" != "/" ]; do
    if [ -d "$current_dir/.aish" ]; then
      echo "$current_dir/.aish"
      return 0
    fi
    current_dir=$(dirname "$current_dir")
  done
  return 1
}
# calculate the message size
function detail.aish_calc_message_size
{
  detail.aish_flush_script_log
  sed -r 's/\x1b\[[0-9;]*[a-zA-Z]//g' $AISH_LOGFILE | col -b > $AISH_SESSION/tmp_user.txt
  if [[ -f "$AISH_SESSION"/mute ]]; then
    echo -n "---"
    return
  fi
  env LANG=C du --apparent-size -ch $(detail.aish_list_parts) $AISH_SESSION/tmp_user.txt | grep 'total$' | sed -e 's/[ \t]\+total$//'
}
# list the part files for the message that is sent
function detail.aish_list_parts
{
  if [[ -z "$1" ]]; then
    max_send=$AISH_MAX_SEND_MESSAGE
  else
    max_send=$1
  fi
  if [[ -z "$max_send" ]]; then
    echo $AISH_SESSION/part_*
    return
  fi
  files=$(find $AISH_SESSION -name 'part_*')
  if [[ -z "$files" ]]; then
    return
  fi
  ls $files | tail -n $max_send
}
# write the code block to individual files
function detail.aish_pickup_codeblock
{
  start_marker='```'
  end_marker='```'

  while IFS= read -r line; do
    if [[ "$line" =~ ^\ *"$start_marker"* ]]; then
      file_name="$AISH_SESSION/codeblock_$(date +%Y%m%d_%H%M%S)_$(printf '%02d' $file_num).txt"
      file_num=$((file_num + 1))
      while IFS= read -r code_line; do
        if [[ "$code_line" =~ ^\ *"$end_marker" ]]; then
          break
        fi
        echo "$code_line" >> "$file_name"
      done
    else
      if [[ "$line" =~ \`.+\` ]]; then
        echo "$line" >> "$AISH_SESSION/codeblock_$(date +%Y%m%d_%H%M%S)_$(printf '%02d' $file_num).txt"
      fi
    fi
  done
}

function detail.aish_log_request
{
  echo '{"type":"request","timestamp":"'$(date +%Y-%m-%dT%H:%M:%S.%NZ)'", "payload":' >> $LOG
  echo "$1"'}' >> $LOG
}
function detail.aish_log_response
{
  echo '{"type":"response","timestamp":"'$(date +%Y-%m-%dT%H:%M:%S.%NZ)'", "payload":' >> $LOG
  echo "$1"'}' >> $LOG
}

function detail.aish_filter_command
{
  local quiet_mode=""
  if [[ "$1" == "-q" ]]; then
    quiet_mode="-q"
  fi
  local display_mode=""
  if [[ "$1" == "-d" ]]; then
    display_mode="--color=always"
  fi
  if [ ! -e "$AISH_SESSION"/approved_lines ]; then
    touch "$AISH_SESSION"/approved_lines
  fi
  python3 "$AISH_HOME"/bad_patterns.py --skip-heuristics "$AISH_HOME"/blocklist | grep -v $quiet_mode -F -f "$AISH_SESSION"/approved_lines
}

function detail.aish_filter_sensitive_info
{
  local matched=false
  local tmp_filtered=$(mktemp "$AISH_SESSION"/tmp_filtered.XXXXXX)
  if [[ ! -f "$tmp_filtered" ]]; then
    echo "Failed to create temporary file for filtering." >&2
    return 1
  fi

  trap 'rm -f "$tmp_filtered"' EXIT

  cat | detail.aish_filter_command > "$tmp_filtered"


  if [[ -s "$tmp_filtered" ]]; then
    matched=true
    echo "⚠️  SECURITY WARNING: Bad patterns matched" >&2
    echo "" >&2
    echo "----------------------------------------" >&2
    cat "$tmp_filtered" >&2
    echo "----------------------------------------" >&2
    echo >&2
  fi

  if [ "$matched" = true ]; then
    echo -n "Send request? ([y]es / [n]o / [a]lways allow this line): " >&2
    read -r confirm < /dev/tty
    if [[ "$confirm" == "a" ]]; then
      cat "$tmp_filtered" >> $AISH_SESSION/approved_lines
      echo "⚠️  SECURITY WARNING: Bad patterns matched, but the line is approved for future use." >&2
    elif [[ "$confirm" != "y" ]]; then
      echo "❌  Request has been aborted." >&2
      return 1
    fi
  fi

  return 0
}

function detail.aish_security_check
{
    # Security check for the files in the session
    # This function reads all files in the session directory and checks for sensitive information.
    # If any sensitive information is found, it prompts the user for confirmation to proceed.
    # If the user not confirm, the script exits with a non-zero status.

    if [[ "$skip_security_check" == "true" ]]; then
      echo "⚠️  SKIP SECURITY FILTER!!" >&2
    fi

    while IFS= read -r file; do
        if [[ "$skip_security_check" != "true" ]]; then
            if ! detail.aish_filter_sensitive_info < "$file"; then
              exit 1
            fi
        fi
        echo "$file"
    done
    return 0
}

function detail.aish_puts_as_markdown
{
  local header_level=1
  if [[ "$1" == "-h" ]]; then
    header_level="$2"
    shift 2
  fi

  local filenames="$@"

  for f in $filenames; do
    if [[ -f "$f" ]]; then
      echo
      echo
      printf '#%.0s' $(seq 1 $header_level)
      echo " $f"
      #echo -n "$(printf '%*s' $header_level | tr ' ' '#') $f"
      echo '```'
      cat "$f"
      echo
      echo '```'
      echo
      echo
    fi
  done
}

function json_escape
{
  jq -Rs '.' | sed 's/^"//;s/"$//'
}
function json_string
{
  jq -Rs '.'
}